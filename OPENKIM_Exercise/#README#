OpenKIM is a major open source effort to develop standards and improve the reliability of molecular simulations. OpenKIM repository contains computer implementations of interactomic models (potentials and force fields), simulation codes, that compute difference material properties, and first-principles/experimental reference data.

------
Archival storage of KIM Content

The openkim repository provides permanent archival storage of interatomic models, tests for computing material properties, reference data, and model predictions (test results).

-> Each KIM item is associated with a KIM item page (KIM Model Page, KIM Test Page, etc), which provides information on the item, simulation results,
   associated files, and a wiki where contributors and users can comment on the item.
-> Each KIM item is identified by a unique permanent KIM ID of the following form : CC_DDDDDDDDDD_VVV, where CC denotes the item type, DDDDDDDDD is a 12-digit code, and VVV is a version number
-> Certain types of KIM content are provided with Digital Object Identifiers (DOIs) including KIM Models, KIM Model Drivers, and Verification Check.
-> Items uploaded to openkim.org can be cited in publications can be linked to form workflow tools, making it possible for simulations
   to be reproduced in the future
-> The OpenKIM repository is designed to be user-extendable. Contributions of new Models, Tests, verification checks, reference data
   and visualizers are welcome.
------

Testing and Verifying Models

Interatomic models stored in OpenKIM repository are exhaustively tested providing users with a wealth of information to help them
select a suitable model for a given application.

-> Each model is subjected to a series of Verification Checks evaluating its integrity, e.g. are the forces by the model consistent
   with those through numerical diffrentiaont of the energy? Does the model have continous energy and derivates at its cutoff? The model
   is graded on each verification check and the results are presented in a dashboard on its model page.

-> The OpenKIM repository contains KIM Tests uploaded by researchers that compute material properties of interest (such as equilibrium
   crystal structures, elastic constants, surface energies, thermal proeprties, etc). The tests are applied to all compatible interatomic
   models in the repository. The results are stored can be examined and compared using visualization tools and text-based tools. Timing
   information is also provided so that the relative expense of different models for the same computation can be assessed.

-> OpnenKIM provides a framework for researchers to distribute and realize their molecular simulations broadly. It is the aim of the KIM
   project for high-quality KIM Tests to become standard, citable methods for computing important material properties.A great deal of expertise
   is required to compute material properties rigorusly and robustly. For more information on KIM tests and to learn how you can work with
   the KIM team on adapting youe simualtions and expertise to craft a new test
   
---

Using KIM Models

-> An important part of the KIM project is the creation of an application programming interface (API) for molecular simulations. The KIM API
is a standard for exchanging information between simulation codes and interatomic models. Simulatrs and models that conform to the KIM API work
together seemlessly. This means that you can download any KIM Model and use it in any KIM-compliant simulation code that supports the KIM API

-> For interatomic models archived in openkim.org that conform to the KIM API , the site stores the actual computer implementation
   of the model not only parameters files that are read in by other programs. This is important since in some cases the same parameter
   file can lead to different results when read in by different programs.

-> To use KIM-compliant software, you first need to install KIM API. Installation from source as well 

-----------------------

Example 1

Test Driver

This deiver is constructed to take the name of a KIM Model and an initial guess at the equilibirum lattice constant of fcc argon, it then
uses LAMMPS to compute the actual cohesive energy and equilibrium lattice constant for that model. Thus the only difference between KIM tests
which use this deiver is the iniital guess at the lattice constant.

List of files:

-=> runner - The scriot begins by reading the model name and the initial lattice constant guess from stdin. These are then used to replace
             the corresponding placeholder string lammps.in.template to create a functioning LAMMPS input script, Lammps.in, in the test
	     test result directory. LAMMPS is the ncalled using lammps.in as an input script and the resulting output is redirected to a file
	     name called lammps.log in the test result directory. After the quantities of interest in the LAMMPS log file are parsed, sed is
	     used to replace the relevant placeholder strings in the results.ed.tpl and yield a file named results.edn

=> lammps.in.template - This specific test driver processes the template below using sed with the information entered on stdin through pipeline.stdin.tpl. The processed file is then written to the final LAMMPS input script which is run (lammps.in in the Test Result directory). Note that when
using a KIM Model within LAMMPS, the appropriate LAMMPS pair style s to use is pair_style kim.

=> result.edn.tpl -

Like the lammps.in.template file above, this is a template used by this specific test driver for convenience. However, not that whichever
method a test driver or test ueses to generate its results, it must eventually produce a valid edn file named 'results.edn.' which conforms
to the KIM properties network. In this case, a suitable property definition for this test driver to report is cohesive-potential-energy-cubic-crystal. By looking at the page of this property, we can see that the lattice constant should be reported in the key 'a' and the cohesive energy in 'cohesive-potential-energy'. The keys 'short-name', 'species', 'basis-atom-coordinates', 'space-group', 'wyckoff-multiplicity-and-letter', and 'wyckoff-coordinates' are always the same here since this Test driver is designed to always do its calculation for a single conventional fcc cell of
four argon atoms.

=> Test

Next, we inspect a Test which uses the above Test Driver. In this case, this Test corresponds to one particular initial guess 


-----
KIM Properties Framework
-----

The OpenKIM system includes a collection of tests, models, predictions and referece data. A Test is a computer program that couples with a
model (i.e. an interatomic potential) to generate one or more predictions, each of which is associated with a specific material property.
In turn, every material property is associated with a property definition.  A prediction is thus a realization of a Property Definition for a specific case. Similarly, an item of reference data is a property instance, obtained from an experiment or a first principles calculation.Thus, every Property instance is either prediction or an item of reference data.

------
About the EDN data format
-------

KIM Properties Framework

1. Overview

The OpenKIM system includes a collections of Tests, Models, PRedictions and Reference Data. A Test is a computer program that couples
with a Model (i.e. an interatomic potential) to generate one or more predictions, each of which is associated with a specific material
property. A prediction is thus a realizaiton of a property definition for a specific case. Similarly, an item of Reference Data is a Property
Instance obtained from an experiment or first principles calculation. Thus, every property instance is either a prediciton or an item of
reference data.

A developer interetsted in contributing a new Test of Reference Data must first determine whether a suitable property definition already exists in OpenKIM by search the properties page on https://openkim.org. If so, they proceed to use the appropriate definiton when writing their test or uploading the reference data.

2. KIM Properties

2.1 KIM Property Information

1. The name and contact infomraiton of the original "contributor" of the property and the "maintainer" who is currently maintaining it

2. A property definition file in EDN format which which defines the property and from which a template can be generated for test developers

3. A file containing documentation about the property, including a detaield explanation of the property and the variables that appear in the
   property definiton

4. A Wiki-style web page which provides supplemntal documentation of the propery and enables community involvement and discussion in its
   maintenance and evolution
   
